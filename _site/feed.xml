<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://192.168.3.154:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://192.168.3.154:4000/" rel="alternate" type="text/html" /><updated>2023-02-12T02:14:17+08:00</updated><id>http://192.168.3.154:4000/feed.xml</id><title type="html">小野blog</title><subtitle>欢迎来到小野blog，这是一个技术博客，主要用于记录自己的技术成长历程。博客内容包括但不限于技术文章，学习心得，杂记等。希望通过这个博客 ，鼓励自己不断的学习和进步，并且能够得到各位大牛的批评指点，能够对热爱编程的朋友们有所帮助。
</subtitle><entry><title type="html">NexChatGPT IDEA插件打赏</title><link href="http://192.168.3.154:4000/nexchatgpt/2023/02/12/%E6%8D%90%E8%B5%A0NexChatGPT%E6%8F%92%E4%BB%B6.html" rel="alternate" type="text/html" title="NexChatGPT IDEA插件打赏" /><published>2023-02-12T00:00:00+08:00</published><updated>2023-02-12T00:00:00+08:00</updated><id>http://192.168.3.154:4000/nexchatgpt/2023/02/12/%E6%8D%90%E8%B5%A0NexChatGPT%E6%8F%92%E4%BB%B6</id><content type="html" xml:base="http://192.168.3.154:4000/nexchatgpt/2023/02/12/%E6%8D%90%E8%B5%A0NexChatGPT%E6%8F%92%E4%BB%B6.html"><![CDATA[<h3 id="如果您喜欢这款插件欢迎为作者进行打赏进行鼓励">如果您喜欢这款插件，欢迎为作者进行打赏，进行鼓励。</h3>

<p>免登陆的ChatGPT插件需要<strong>消耗大量的OpenAI账号及额度</strong>，作者当前都是自掏腰包进行付费，为的是国内的用户可以免受账号注册、账号登录之扰。作者当前也是利用业余时间全力的进行功能迭代，维护服务运行稳定。
<!--more--></p>

<p><img src="/images/weChatDonate.jpeg" alt="Alt text" height="30%" width="30%" /></p>]]></content><author><name></name></author><category term="NexChatGPT" /><category term="NexChatGPT" /><summary type="html"><![CDATA[如果您喜欢这款插件，欢迎为作者进行打赏，进行鼓励。 免登陆的ChatGPT插件需要消耗大量的OpenAI账号及额度，作者当前都是自掏腰包进行付费，为的是国内的用户可以免受账号注册、账号登录之扰。作者当前也是利用业余时间全力的进行功能迭代，维护服务运行稳定。]]></summary></entry><entry><title type="html">Java SE 8 lamda</title><link href="http://192.168.3.154:4000/java/se/2017/03/30/lamda.html" rel="alternate" type="text/html" title="Java SE 8 lamda" /><published>2017-03-30T00:00:00+08:00</published><updated>2017-03-30T00:00:00+08:00</updated><id>http://192.168.3.154:4000/java/se/2017/03/30/lamda</id><content type="html" xml:base="http://192.168.3.154:4000/java/se/2017/03/30/lamda.html"><![CDATA[<h2 id="介绍">介绍</h2>
<p>Lamda表达式是Java SE 8新引入的重要的特性。
它提供了一个干净简洁的方式来表达单方法接口（即函数式接口）
Lamda表达式还提升了Collection包，使对Collections进行遍历，过滤，数据抽取等操作变得更容易。
此外，新的并发特性也提升了上述操作的性能。
<!--more--></p>

<h2 id="背景">背景</h2>
<p>java api中有很多单方法的接口，比如下列接口：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="no">T</span> <span class="n">o1</span><span class="o">,</span> <span class="no">T</span> <span class="n">o2</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>这种只有一个方法的接口被称之为函数式接口，因为它更像是一个函数，一个功能，而不是我们熟悉的面向对象思想中的一个类。
后面会看到，lamda表达式可以很方便的表达这种接口。</p>

<h2 id="语法">语法</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="o">()</span> <span class="o">-&gt;</span> <span class="mi">42</span>

<span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="o">}</span></code></pre></figure>

<h2 id="examples">examples</h2>
<h3 id="runnable-lamda">Runnable Lamda</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunnableTest</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
     
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=== RunnableTest ==="</span><span class="o">);</span>     
     <span class="c1">// Anonymous Runnable
</span>
     <span class="nc">Runnable</span> <span class="n">r1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Runnable</span><span class="o">(){</span>
       
       <span class="nd">@Override</span>
       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
         <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello world one!"</span><span class="o">);</span>
       <span class="o">}</span>
     <span class="o">};</span>
     
     <span class="c1">// Lambda Runnable
</span>
     <span class="nc">Runnable</span> <span class="n">r2</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello world two!"</span><span class="o">);</span>
     
     <span class="c1">// Run em!
</span>
     <span class="n">r1</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
     <span class="n">r2</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
     
   <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h3 id="comparator-lambda">Comparator Lambda</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComparatorTest</span> <span class="o">{</span>
 
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    
     <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">personList</span> <span class="o">=</span> <span class="nc">Person</span><span class="o">.</span><span class="na">createShortList</span><span class="o">();</span>
   
     <span class="c1">// Sort with Inner Class
</span>
     <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">personList</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;(){</span>
       <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Person</span> <span class="n">p1</span><span class="o">,</span> <span class="nc">Person</span> <span class="n">p2</span><span class="o">){</span>
         <span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">getSurName</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">getSurName</span><span class="o">());</span>
       <span class="o">}</span>
     <span class="o">});</span>
     
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=== Sorted Asc SurName ==="</span><span class="o">);</span>
     <span class="k">for</span><span class="o">(</span><span class="nc">Person</span> <span class="nl">p:</span><span class="n">personList</span><span class="o">){</span>
       <span class="n">p</span><span class="o">.</span><span class="na">printName</span><span class="o">();</span>
     <span class="o">}</span>
     
     <span class="c1">// Use Lambda instead
</span>
     
     <span class="c1">// Print Asc
</span>
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=== Sorted Asc SurName ==="</span><span class="o">);</span>
     <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">personList</span><span class="o">,</span> <span class="o">(</span><span class="nc">Person</span> <span class="n">p1</span><span class="o">,</span> <span class="nc">Person</span> <span class="n">p2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">p1</span><span class="o">.</span><span class="na">getSurName</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">getSurName</span><span class="o">()));</span>
 
     <span class="k">for</span><span class="o">(</span><span class="nc">Person</span> <span class="nl">p:</span><span class="n">personList</span><span class="o">){</span>
       <span class="n">p</span><span class="o">.</span><span class="na">printName</span><span class="o">();</span>
     <span class="o">}</span>
     
     <span class="c1">// Print Desc
</span>
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=== Sorted Desc SurName ==="</span><span class="o">);</span>
     <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">personList</span><span class="o">,</span> <span class="o">(</span><span class="n">p1</span><span class="o">,</span>  <span class="n">p2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">p2</span><span class="o">.</span><span class="na">getSurName</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p1</span><span class="o">.</span><span class="na">getSurName</span><span class="o">()));</span>
 
     <span class="k">for</span><span class="o">(</span><span class="nc">Person</span> <span class="nl">p:</span><span class="n">personList</span><span class="o">){</span>
       <span class="n">p</span><span class="o">.</span><span class="na">printName</span><span class="o">();</span>
     <span class="o">}</span>
     
   <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h2 id="javautilfunction-package">java.util.function Package</h2>

<ul>
  <li>Predicate: 返回boolean，一般用于过滤</li>
  <li>Consumer: 用来消费传入的参数</li>
  <li>Function: 将输入转换成输出，典型的一个函数</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">//Predicate&lt;T&gt;
</span>
<span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>

<span class="c1">//Consumer&lt;T&gt;
</span>
<span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>

<span class="c1">//Function&lt;T, R&gt;
</span>
<span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">getAge</span><span class="o">()&gt;</span><span class="mi">16</span> <span class="o">;</span>
<span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">consumer</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>

<span class="k">for</span><span class="o">(</span><span class="nc">Person</span> <span class="nl">p:</span><span class="n">people</span><span class="o">){</span>
	<span class="k">if</span><span class="o">(</span><span class="n">predicate</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">p</span><span class="o">)){</span>
		<span class="n">consumer</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">function</span> <span class="o">=</span> <span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">;</span>
<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">person</span><span class="o">);</span> </code></pre></figure>

<h2 id="collections">Collections</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">people</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">getAge</span><span class="o">()&gt;=</span><span class="mi">16</span><span class="o">)</span>
	   <span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">getAge</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">sum</span><span class="o">()</span></code></pre></figure>

<h2 id="resource">Resource</h2>
<p>更多Java SE 8和lamda表达式，参考如下列表：</p>
<ul>
  <li><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html">Lambda Quick Start</a></li>
  <li><a href="http://openjdk.java.net/projects/jdk8/">Java 8</a></li>
  <li><a href="http://openjdk.java.net/projects/lambda/">Project Lambda</a></li>
  <li><a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html">State of the Lambda</a></li>
  <li><a href="http://cr.openjdk.java.net/~briangoetz/lambda/sotc3.html">State of the Lambda Collections</a></li>
</ul>]]></content><author><name></name></author><category term="java" /><category term="SE" /><category term="javaSE" /><category term="lamda" /><summary type="html"><![CDATA[介绍 Lamda表达式是Java SE 8新引入的重要的特性。 它提供了一个干净简洁的方式来表达单方法接口（即函数式接口） Lamda表达式还提升了Collection包，使对Collections进行遍历，过滤，数据抽取等操作变得更容易。 此外，新的并发特性也提升了上述操作的性能。]]></summary></entry><entry><title type="html">JMS简介</title><link href="http://192.168.3.154:4000/jms/2017/03/26/jms.html" rel="alternate" type="text/html" title="JMS简介" /><published>2017-03-26T00:00:00+08:00</published><updated>2017-03-26T00:00:00+08:00</updated><id>http://192.168.3.154:4000/jms/2017/03/26/jms</id><content type="html" xml:base="http://192.168.3.154:4000/jms/2017/03/26/jms.html"><![CDATA[<p>原文链接  <a href="http://blog.csdn.net/jiuqiyuliang/article/details/46701559">深入浅出JMS(一)–JMS基本概念</a></p>

<p>这篇博文我们主要介绍J2EE中的一个重要规范JMS，因为这个规范在企业中的应用十分的广泛，也比较重要，我们主要介绍JMS的基本概念和它的模式，消息的消费以及JMS编程步骤。
<!--more--></p>
<h3 id="基本概念">基本概念</h3>

<p>JMS是java的消息服务，JMS的客户端之间可以通过JMS服务进行异步的消息传输。</p>

<h3 id="消息模型">消息模型</h3>

<ul>
  <li>Point-to-Point(P2P)</li>
  <li>Publish/Subscribe(Pub/Sub)</li>
</ul>

<p>即点对点和发布订阅模型</p>

<h3 id="p2p">P2P</h3>

<p>P2P模式图</p>

<p><img src="/images/p2p.jpg" alt="Alt text" /></p>

<p>涉及到的概念</p>
<ul>
  <li>消息队列(Queue)</li>
  <li>发送者(Sender)</li>
  <li>接收者(Receiver)</li>
</ul>

<p>每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p>

<h3 id="p2p的特点">P2P的特点</h3>
<blockquote>
  <p>每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)
发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列
接收者在成功接收消息之后需向队列应答成功
如果你希望发送的每个消息都应该被成功处理的话，那么你需要P2P模式。</p>
</blockquote>

<h3 id="pubsub">Pub/Sub</h3>

<p>Pub/Sub模式图</p>

<p><img src="/images/pubsub.jpg" alt="Alt text" /></p>

<p>涉及到的概念</p>
<ul>
  <li>主题（Topic）</li>
  <li>发布者（Publisher）</li>
  <li>订阅者（Subscriber）</li>
</ul>

<p>客户端将消息发送到主题。多个发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。</p>

<h3 id="pubsub的特点">Pub/Sub的特点</h3>

<blockquote>
  <p>每个消息可以有多个消费者
布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息，而且为了消费消息，订阅者必须保持运行的状态。
为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。
如果你希望发送的消息可以不被做任何处理、或者被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型</p>
</blockquote>

<h3 id="消息的消费">消息的消费</h3>
<p>在JMS中，消息的产生和消息是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。</p>
<ul>
  <li>同步 
订阅者或接收者调用receive方法来接收消息，receive方法在能够接收到消息之前（或超时之前）将一直阻塞</li>
  <li>异步 
订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。</li>
</ul>

<h2 id="jms编程模型">JMS编程模型</h2>

<p>(1) ConnectionFactory</p>

<p>创建Connection对象的工厂，针对两种不同的jms消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。</p>

<p>(2) Destination</p>

<p>Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。</p>

<p>所以，Destination实际上就是两种类型的对象：Queue、Topic可以通过JNDI来查找Destination。</p>

<p>(3) Connection</p>

<p>Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP socket的包装）。Connection可以产生一个或多个Session。跟ConnectionFactory一样，Connection也有两种类型：QueueConnection和TopicConnection。</p>

<p>(4) Session</p>

<p>Session是我们操作消息的接口。可以通过session创建生产者、消费者、消息等。Session提供了事务的功能。当我们需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分QueueSession和TopicSession。</p>

<p>(5) 消息的生产者</p>

<p>消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。</p>

<p>(6) 消息消费者</p>

<p>消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p>

<p>(7) MessageListener</p>

<p>消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。</p>

<h3 id="企业消息系统的好处">企业消息系统的好处</h3>

<p>我们先来看看下图，应用程序A将Message发送到服务器上，然后应用程序B从服务器中接收A发来的消息，通过这个图我们一起来分析一下JMS的好处：</p>

<p><img src="/images/company.jpg" alt="Alt text" /></p>

<ul>
  <li>提供消息灵活性</li>
  <li>松散耦合</li>
  <li>异步性</li>
</ul>

<p>对于JMS的基本概念我们就介绍这么多。</p>

<h3 id="code-test">code test</h3>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">show</span>
  <span class="vi">@widget</span> <span class="o">=</span> <span class="no">Widget</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
    <span class="nb">format</span><span class="p">.</span><span class="nf">html</span> <span class="c1"># show.html.erb
</span>
    <span class="nb">format</span><span class="p">.</span><span class="nf">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json: </span><span class="vi">@widget</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>]]></content><author><name></name></author><category term="jms" /><category term="jms" /><summary type="html"><![CDATA[原文链接 深入浅出JMS(一)–JMS基本概念 这篇博文我们主要介绍J2EE中的一个重要规范JMS，因为这个规范在企业中的应用十分的广泛，也比较重要，我们主要介绍JMS的基本概念和它的模式，消息的消费以及JMS编程步骤。]]></summary></entry></feed>